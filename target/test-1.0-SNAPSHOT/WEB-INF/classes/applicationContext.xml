<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.1.xsd
        ">

    <!--引入配置属性文件 -->
    <context:property-placeholder location="classpath*:/jdbc.properties" />
    <!--扫描org.andy.work下文件，自动注入dao,entity,service为bean -->
    <context:component-scan base-package="com.efun.dao.impl,com.efun.service.impl" />

    <!-- druid数据源配置 -->
    <!-- 阿里 druid 数据库连接池 -->
    <bean id="dataSource"   class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
        <!-- 数据库驱动 -->
        <property name="driverClassName"><value>${jdbc.driverClassName}</value></property>
        <!-- ur地址 -->
        <property name="url"><value>${jdbc.url}</value></property>
        <!-- 用户名 -->
        <property name="username"><value>${jdbc.username}</value></property>
        <!-- 密码 -->
        <property name="password" ><value>${jdbc.password}</value></property>
        <!-- 密码 -->
        <property name="filters" ><value>${jdbc.filters}</value></property>
        <!-- 初始化连接数量 -->
        <property name="initialSize" ><value>${jdbc.initialSize}</value></property>
        <!-- 最大并发连接数 -->
        <property name="maxActive"><value>${jdbc.maxActive}</value> </property>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait"><value>${jdbc.maxWait}</value> </property>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis"><value>${jdbc.timeBetweenEvictionRunsMillis}</value> </property>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis"><value>${jdbc.minEvictableIdleTimeMillis}</value> </property>
        <!--   用来检测连接是否有效的sql，要求是一个查询语句 -->
        <property name="validationQuery"><value>${jdbc.validationQuery}</value> </property>
        <!-- 建议配置为true，不影响性能，并且保证安全性。 申请连接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效 -->
        <property name="testWhileIdle"><value>${jdbc.testWhileIdle}</value> </property>
        <!-- 要启用PSCache，必须配置大于0，当大于0时， poolPreparedStatements自动触发修改为true。 在Druid中，不会存在Oracle下PSCache占用内存过多的问题， 可以把这个数值配置大一些，比如说10-->
        <property name="maxOpenPreparedStatements"><value>${jdbc.maxOpenPreparedStatements}</value> </property>
        <!-- 打开 removeAbandoned 功能 -->
        <property name="removeAbandoned"><value>${jdbc.removeAbandoned}</value> </property>
        <!-- 1800 秒，也就是 30 分钟 -->
        <property name="removeAbandonedTimeout"><value>${jdbc.removeAbandonedTimeout}</value> </property>
        <!--关闭 abanded 连接时输出错误日志-->
        <property name="logAbandoned"><value>${jdbc.logAbandoned}</value> </property>
    </bean>


    <!-- spring jdbc -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="namedParameterJdbcTemplate"
          class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
        <constructor-arg ref="dataSource" />
    </bean>

    <!-- 配置事务管理 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 声明式事务，事务拦截器 -->
    <bean id="transactionInterceptor"
          class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager" />
        <!-- 配置事务属性 -->
        <property name="transactionAttributes">
            <!--下面定义事务传播属性 -->
            <props>
                <prop key="save*">PROPAGATION_REQUIRED</prop>
                <prop key="del*">PROPAGATION_REQUIRED</prop>
                <prop key="update">PROPAGATION_REQUIRED</prop>

                <prop key="get*">PROPAGATION_SUPPORTS,readOnly</prop>
                <prop key="find*">PROPAGATION_SUPPORTS,readOnly</prop>
                <prop key="*">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>

    <!-- Bean后处理器BeanNameAutoProxyCreator，根据List配置创建事务代理 -->
    <bean
            class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
        <!-- 下面是所有需要自动创建事务代理的bean -->
        <property name="beanNames">
            <list>
                <value>*Service</value>
            </list>
        </property>
        <!-- 下面定义BeanNameAutoProxyCreator所需的事务拦截器 -->
        <property name="interceptorNames">
            <list>
                <value>transactionInterceptor</value>
            </list>
        </property>
    </bean>

</beans>